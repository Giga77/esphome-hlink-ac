esphome:
  name: hlink-dev-arduino-actions

external_components:
  - source: /components

logger:
  level: DEBUG

esp32:
  board: lolin_d32
  framework:
    type: arduino

uart:
  id: hitachi_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 9600
  parity: ODD

climate:
  - platform: hlink_ac
    id: hitachi_ac
    name: "H-Link Test Climate Device"
    on_send_hlink_cmd_result:
      then:
        - mqtt.publish:
            topic: hlink_ac/send_hlink_frame_result
            payload: !lambda |-
              JsonDocument doc;
              doc["cmd_type"] = result.cmd_type;
              doc["request_address"] = result.request_address;
              doc["result_status"] = result.result_status;
              if (result.request_data.has_value())
                doc["request_data"] = result.request_data.value();
              if (result.response_data.has_value())
                doc["response_data"] = result.response_data.value();
              std::string out;
              serializeJson(doc, out);
              return out;
button:
  - platform: template
    name: "Reset Air Filter Warning"
    on_press:
      then:
        - hlink_ac.reset_air_filter_clean_warning:
            id: hitachi_ac

wifi:
  ssid: test
  password: testtest

mqtt:
  broker: 1.1.1.1
  username: test
  password: test
  on_json_message:
    topic: hlink_ac/send_hlink_frame
    then:
      - lambda: |-
          if (x["messages"].is<JsonArrayConst>()) {
            for (auto message : x["messages"].as<JsonArrayConst>()) {
              std::string cmd_type = "";
              std::string address = "";
              optional<std::string> data = {};
              if (message["cmd_type"].is<const char*>()) {
                cmd_type = std::string(message["cmd_type"].as<const char*>());
              }
              if (message["address"].is<const char*>()) {
                address = std::string(message["address"].as<const char*>());
              }
              if (message["data"].is<const char*>()) {
                data = std::string(message["data"].as<const char*>());
              }
              id(hitachi_ac).send_hlink_cmd(cmd_type, address, data);
            }
          }